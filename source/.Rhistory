i <- i - 1 #Moves back one column to find previous day
}
}
places <- places[1:(y-1),]
print(places)
Confirmed <- read.csv(file = "../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
places <- data.frame(nrow = nrow(Confirmed), ncol = 2)
y <- 1
for(x in 1:nrow(Confirmed)){ #iterates through rows
i <- ncol(Confirmed) #Starts at the last column
Cases <- Confirmed[x,i] #Finds values for the number of cases
Cases_yesterday <- Confirmed[x,(i-1)] #Finds values for the number of cases the day before
if ((Cases > 0) & (Cases_yesterday == 0)){ #The first date of instance
print(x)
places[y,1:2] <- Confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Moves back one column to find previous day
}
}
places <- places[:(y-1),]
Confirmed <- read.csv(file = "../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
places <- data.frame(nrow = nrow(Confirmed), ncol = 2)
y <- 1
for(x in 1:nrow(Confirmed)){ #iterates through rows
i <- ncol(Confirmed) #Starts at the last column
Cases <- Confirmed[x,i] #Finds values for the number of cases
Cases_yesterday <- Confirmed[x,(i-1)] #Finds values for the number of cases the day before
if ((Cases > 0) & (Cases_yesterday == 0)){ #The first date of instance
print(x)
places[y,1:2] <- Confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Moves back one column to find previous day
}
}
places <- places[y:(y-1),]
print(places)
Confirmed <- read.csv(file = "../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
places <- data.frame(nrow = nrow(Confirmed), ncol = 2)
y <- 1
for(x in 1:nrow(Confirmed)){ #iterates through rows
i <- ncol(Confirmed) #Starts at the last column
Cases <- Confirmed[x,i] #Finds values for the number of cases
Cases_yesterday <- Confirmed[x,(i-1)] #Finds values for the number of cases the day before
if ((Cases > 0) & (Cases_yesterday == 0)){ #The first date of instance
print(x)
places[y,1:2] <- Confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Moves back one column to find previous day
}
}
places <- places[257:(y-1),]
print(places)
Confirmed <- read.csv(file = "../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
places <- data.frame(nrow = nrow(Confirmed), ncol = 2)
y <- 1
for(x in 1:nrow(Confirmed)){ #iterates through rows
i <- ncol(Confirmed) #Starts at the last column
Cases <- Confirmed[x,i] #Finds values for the number of cases
Cases_yesterday <- Confirmed[x,(i-1)] #Finds values for the number of cases the day before
if ((Cases > 0) & (Cases_yesterday == 0)){ #The first date of instance
print(x)
places[y,1:2] <- Confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Moves back one column to find previous day
}
}
places <- places[1:(y-1),]
print(places)
Confirmed <- read.csv(file = "../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
places <- data.frame(lat = nrow(Confirmed), long = 2) #creates dataframe to contain lat and long
y <- 1
for(x in 1:nrow(Confirmed)){ #iterates through rows
i <- ncol(Confirmed) #Starts at the last column
Cases <- Confirmed[x,i] #Finds values for the number of cases
Cases_yesterday <- Confirmed[x,(i-1)] #Finds values for the number of cases the day before
if ((Cases > 0) & (Cases_yesterday == 0)){ #The first date of instance
print(x)
places[y,1:2] <- Confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Moves back one column to find previous day
}
}
places <- places[1:(y-1),]
print(places)
Confirmed <- read.csv(file = "../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
places <- data.frame(lat = nrow(Confirmed), long = ncol(Confirmed)) #creates dataframe to contain lat and long
y <- 1
for(x in 1:nrow(Confirmed)){ #iterates through rows
i <- ncol(Confirmed) #Starts at the last column
Cases <- Confirmed[x,i] #Finds values for the number of cases
Cases_yesterday <- Confirmed[x,(i-1)] #Finds values for the number of cases the day before
if ((Cases > 0) & (Cases_yesterday == 0)){ #The first date of instance
print(x)
places[y,1:2] <- Confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Moves back one column to find previous day
}
}
places <- places[1:(y-1),1:(y-1)]
print(places)
Confirmed <- read.csv(file = "../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
places <- data.frame(lat = nrow(Confirmed), long = ncol(Confirmed)) #creates dataframe to contain lat and long
y <- 1
for(x in 1:nrow(Confirmed)){ #iterates through rows
i <- ncol(Confirmed) #Starts at the last column
Cases <- Confirmed[x,i] #Finds values for the number of cases
Cases_yesterday <- Confirmed[x,(i-1)] #Finds values for the number of cases the day before
if ((Cases > 0) & (Cases_yesterday == 0)){ #The first date of instance
print(x)
places[y,1:2] <- Confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Moves back one column to find previous day
}
}
places <- places[1:(y-1),1:(y-1)] #Truncate dataframe to correct size
print(places)
Confirmed <- read.csv(file = "../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(lat = nrow(Confirmed), long = ncol(Confirmed)) #creates dataframe to contain lat and long
y <- 1
for(x in 1:nrow(Confirmed)){ #iterates through rows
i <- ncol(Confirmed) #Starts at the last column
Cases <- Confirmed[x,i] #Finds values for the number of cases
Cases_yesterday <- Confirmed[x,(i-1)] #Finds values for the number of cases the day before
if ((Cases > 0) & (Cases_yesterday == 0)){ #The first date of instance
print(x)
recent_places[y,1:2] <- Confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Moves back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),1:(y-1)] #Truncate dataframe to correct size
print(recent_places)
#### Load necessary packages ####
# * These packages are not necessary to complete the assignment and or only used
#   to provide an example.
packages <- c("knitr", "kableExtra", "magrittr", "readr", "geosphere")
install_me <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(install_me)) install.packages(install_me)
library(knitr)
#library(kableExtra)
library(magrittr)
library(readr)
library(geosphere)
# Algorithm
# Step1. Read in csv files.
# Step2. find which column is the first day.
# Step3. Make a list of the first days places as keys and with a count as the value
# Step4. go through the list and look for the max count, the corresponding location is the origin.
# Step5. Print the location.
add_first_day_cases <- function(lst, data_frame){
for (i in 1:nrow(data_frame))
{
#key will be the name of the place without spaces added.
key <- paste0(data_frame[ i, 1], " ", data_frame[ i, 2])
num_of_cases <- data_frame[ i, 5]
if (is.null(lst[[key]]) && num_of_cases > 0)
{
lst[[key]] <- num_of_cases
}
else if (num_of_cases > 0)
{
lst[[key]] <- lst[[key]] + num_of_cases
}
else
{
#do nothing
}
}
lst # return lst
}
# read in data
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
first_day_cases <- list()
# call function for each data set.
first_day_cases <- add_first_day_cases(first_day_cases, confirmed)
first_day_cases <- add_first_day_cases(first_day_cases, recovered)
first_day_cases <- add_first_day_cases(first_day_cases, deaths)
#Output answer
places <- names(first_day_cases)
ground_zero <- places[which.max(first_day_cases)]
print(paste0("Ground zero for the virus seems to be ", ground_zero, "."))
#### Load necessary packages ####
# * These packages are not necessary to complete the assignment and or only used
#   to provide an example.
packages <- c("knitr", "kableExtra", "magrittr", "readr", "geosphere")
install_me <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(install_me)) install.packages(install_me)
library(knitr)
#library(kableExtra)
library(magrittr)
library(readr)
library(geosphere)
recent_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed)) #creates dataframe to contain lat and long
recent_places <- data.frame(lat = nrow(ob.1confirmed), long = ncol(ob.1confirmed)) #creates dataframe to contain lat and long
recent_places <- data.frame(lat = nrow(ob1.confirmed), long = ncol(ob.1confirmed)) #creates dataframe to contain lat and long
recent_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed)) #creates dataframe to contain lat and long
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed)) #creates dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Starts at the last column
cases <- confirmed[x,i] #Finds values for the number of cases
cases_yesterday <- confirmed[x,(i-1)] #Finds values for the number of cases the day before
if ((cases > 0) & (cases_yesterday == 0)){ #The first date of instance
print(x)
recent_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Moves back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),1:(y-1)] #Truncate dataframe to correct size
print(recent_places)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
cases <- confirmed[x,i] #Find values for the number of cases
cases_yesterday <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (cases > 0 && cases_yesterday == 0){ #The first date of instance
print(x)
recent_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),1:(y-1)] #Truncate dataframe to correct size
print(recent_places)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
cases <- confirmed[x,i] #Find values for the number of cases
cases_yesterday <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (cases > 0 && cases_yesterday == 0){ #The first date of instance
print(x)
recent_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),1:(y-1)] #Truncate dataframe to correct size
print(recent_places)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
cases <- confirmed[x,i] #Find values for the number of cases
cases_yesterday <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (cases > 0 && cases_yesterday == 0){ #The first date of instance
print(x)
recent_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),1:(y-1)] #Truncate dataframe to correct size
print(recent_places)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
print(x)
recent_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),1:(y-1)] #Truncate dataframe to correct size
print(recent_places)
y <- 1
first_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed))
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
cases_prior <- confirmed[x,(i-1)]
if (cases > 0)
{
first_places[y,1:2] <- confirmed[w,3:4]
y <- y + 1
}
else
{
i <- i + 1
}
}
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
print(x)
recent_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),1:(y-1)] #Truncate dataframe to correct size
print(recent_places)
y <- 1
first_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed))
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
cases_prior <- confirmed[x,(i-1)]
if (cases > 0)
{
first_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
}
else
{
i <- i + 1
}
}
first_places <- first_places[1:(y-1),1:(y-1)] #Truncate dataframe to correct size
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
print(x)
recent_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),1:(y-1)] #Truncate dataframe to correct size
print(recent_places)
y <- 1
first_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed))
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > 0)
{
first_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
}
else
{
i <- i + 1
}
}
first_places <- first_places[1:(y),1:(y)] #Truncate dataframe to correct size
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
print(x)
recent_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),1:(y-1)] #Truncate dataframe to correct size
print(recent_places)
y <- 1
first_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed))
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > 0)
{
first_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
}
else
{
i <- i + 1
}
}
first_places <- first_places[1:(y),] #Truncate dataframe to correct size
print(first_places)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
print(x)
recent_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
print(recent_places)
y <- 1
first_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed))
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > 0)
{
first_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
}
else
{
i <- i + 1
}
}
first_places <- first_places[1:(y),] #Truncate dataframe to correct size
print(first_places)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
print(x)
recent_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
print(recent_places)
y <- 1
first_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed))
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > 0)
{
first_places[y,1:2] <- confirmed[x,3:4]
print(x)
y <- y + 1
}
else
{
i <- i + 1
}
}
first_places <- first_places[1:(y),] #Truncate dataframe to correct size
print(first_places)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
print(x)
recent_places[y,1:2] <- confirmed[x,3:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
print(recent_places)
y <- 1
first_places <- data.frame(lat = nrow(confirmed), long = ncol(confirmed))
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > 0)
{
first_places[y,1:2] <- confirmed[x,3:4]
print(x)
y <- y + 1
}
else
{
i <- i + 1
}
}
first_places <- first_places[1:(y-1),] #Truncate dataframe to correct size
print(first_places)
