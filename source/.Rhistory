global_confirmed <- sum(sums_confirmed)
global_recoveries <- sum(sums_recoveries)
global_deaths <-  sum(sums_deaths)
global_risk <- global_deaths / global_recoveries
global_risk
global_burden <- global_confirmed * global_risk
global_burden
#Algorithm
#Step1. Find the risk for each area
#Step2. Find the burden for each area
#Step3. Find global risk and confirmed
# read in data
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
places <- data.frame(confirmed[ , 1], " ",confirmed[ , 2])
print(places)
risk <- sums_deaths / sums_recoveries
#risk # NaN means a divide by zero has occured fin
burden <- sums_confirmed * risk
is.vector(risk)
risk[which.min(risk)]
risk[which.max(risk)]
global_confirmed <- sum(sums_confirmed)
global_recoveries <- sum(sums_recoveries)
global_deaths <-  sum(sums_deaths)
global_risk <- global_deaths / global_recoveries
global_risk
global_burden <- global_confirmed * global_risk
global_burden
#Algorithm
#Step1. Find the risk for each area
#Step2. Find the burden for each area
#Step3. Find global risk and confirmed
# read in data
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
places <- data.frame(confirmed[ , 1],confirmed[ , 2])
risk <- sums_deaths / sums_recoveries
#risk # NaN means a divide by zero has occured fin
burden <- sums_confirmed * risk
is.vector(risk)
risk[which.min(risk)]
risk[which.max(risk)]
global_confirmed <- sum(sums_confirmed)
global_recoveries <- sum(sums_recoveries)
global_deaths <-  sum(sums_deaths)
global_risk <- global_deaths / global_recoveries
global_risk
global_burden <- global_confirmed * global_risk
global_burden
#Algorithm
#Step1. Find the risk for each area
#Step2. Find the burden for each area
#Step3. Find global risk and confirmed
# read in data
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
places <- paste0(confirmed[ , 1], " ", confirmed[ , 2])
risk <- sums_deaths / sums_recoveries
#risk # NaN means a divide by zero has occured fin
burden <- sums_confirmed * risk
is.vector(risk)
risk[which.min(risk)]
risk[which.max(risk)]
global_confirmed <- sum(sums_confirmed)
global_recoveries <- sum(sums_recoveries)
global_deaths <-  sum(sums_deaths)
global_risk <- global_deaths / global_recoveries
global_risk
global_burden <- global_confirmed * global_risk
global_burden
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
total_confir[i] <- rowSums(confirmed[i, 5:ncol(confirmed)])
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
# for testing
total_data = data.frame(countries, total_confir, total_deaths, total_recov)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
total_confir[i] <- rowSums(confirmed[i, 5:ncol(confirmed)])
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
length(places)
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
total_confir[i] <- rowSums(confirmed[i, 5:ncol(confirmed)])
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
total_confir[i] <- rowSums(confirmed[i, 5:ncol(confirmed)])
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
# for testing
total_data <- data.frame(countries, total_confir, total_deaths, total_recov)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
total_confir[i] <- rowSums(confirmed[i, 5:ncol(confirmed)])
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
length(countries)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
total_confir[i] <- rowSums(confirmed[i, 5:ncol(confirmed)])
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
print(countries)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
total_confir[i] <- rowSums(confirmed[i, 5:ncol(confirmed)])
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
print(total_confirmed)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
total_confir[i] <- sums_confirmed
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
total_confir[i] <- sums_confirmed[,]
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
print(sums_confirmed)
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
print(sums_confirmed)
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (x in 1:length(sums_confirmed)) {
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
total_confirmed[i] <- sums_confirmed[x]
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
}
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
print(sums_confirmed)
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (x in 1:length(sums_confirmed)) {
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
total_confir[i] <- sums_confirmed[x]
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
}
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
print(sums_confirmed)
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (x in 1:length(sums_confirmed)) {
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
total_confir[i] <- sums_confirmed[x]
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
}
print(total_confir)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (x in 1:length(sums_confirmed)) {
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
total_confir[i] <- sums_confirmed[x]
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
}
print(total_confir)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recovered <- read.csv(file="../data/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)
deaths <- read.csv(file="../data/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)
sums_confirmed <- rowSums(confirmed[, 5:ncol(confirmed)])
sums_recoveries <- rowSums(recovered[, 5:ncol(recovered)])
sums_deaths <- rowSums(deaths[, 5:ncol(deaths)])
# the countries are identical across the data sets so using one will do
places <- confirmed[, 2]
# creating empty vectors for the data
countries <- vector()
total_confir <- vector()
total_recov <- vector()
total_deaths <- vector()
# for every country in the original data sets
for (x in 1:length(sums_confirmed)) {
for (i in 1:length(places)) {
if (is.element(places[i], countries)) {
# If the element is already in the countries vector
total_confir[i] <- sums_confirmed[x] + sums_confirmed
}
else {
# If the element is not already in the countries vector
countries <- c(countries, places[i])
total_confir <- c(total_confir, sums_confirmed[i])
total_recov <- c(total_recov, sums_recoveries[i])
total_deaths <- c(total_deaths, sums_deaths[i])
}
}
}
print(total_confir)
