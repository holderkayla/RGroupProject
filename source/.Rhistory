{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo)
dist_mile <- dist_meter/1609.344
print(first_place)
cat(paste0(recent_places[,2], " is ", dist_mile[], " miles away from ", first_place[,1], " ", first_place[,2], sep="\n"))
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(Providence = nrow(confirmed), Country = ncol(confirmed), Lat = nrow(confirmed), Long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
recent_places[y,1:4] <- confirmed[x,1:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
y <- 1
first_place <- data.frame(Providence = 1, Country = 1, Lat = 1, Long = 1)
cases_number <- 0
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > cases_number)
{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo)
dist_mile <- dist_meter/1609.344
print(first_place[,2])
cat(paste0(recent_places[,2], " is ", dist_mile[], " miles away from ", first_place[,1], " ", first_place[,2], sep="\n"))
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(Providence = nrow(confirmed), Country = ncol(confirmed), Lat = nrow(confirmed), Long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
recent_places[y,1:4] <- confirmed[x,1:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
y <- 1
first_place <- data.frame(Providence = 1, Country = 1, Lat = 1, Long = 1)
cases_number <- 0
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > cases_number)
{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo)
dist_mile <- dist_meter/1609.344
full_info <- matrix(recent_places[,2], dist_mile[], first_place[,1], first_place[,2], nrow = nrow(recent_places), ncol = 4)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(Providence = nrow(confirmed), Country = ncol(confirmed), Lat = nrow(confirmed), Long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
recent_places[y,1:4] <- confirmed[x,1:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
y <- 1
first_place <- data.frame(Providence = 1, Country = 1, Lat = 1, Long = 1)
cases_number <- 0
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > cases_number)
{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo)
dist_mile <- dist_meter/1609.344
full_info <- matrix(recent_places[,2], dist_mile[], first_place[,], first_place[,], nrow = nrow(recent_places), ncol = 4)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(Providence = nrow(confirmed), Country = ncol(confirmed), Lat = nrow(confirmed), Long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
recent_places[y,1:4] <- confirmed[x,1:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
y <- 1
first_place <- data.frame(Providence = 1, Country = 1, Lat = 1, Long = 1)
cases_number <- 0
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > cases_number)
{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo)
dist_mile <- dist_meter/1609.344
full_info <- matrix(recent_places[,2], dist_mile[], first_place[,1:2], nrow = nrow(recent_places), ncol = 3)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(Providence = nrow(confirmed), Country = ncol(confirmed), Lat = nrow(confirmed), Long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
recent_places[y,1:4] <- confirmed[x,1:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
y <- 1
first_place <- data.frame(Providence = 1, Country = 1, Lat = 1, Long = 1)
cases_number <- 0
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > cases_number)
{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo)
dist_mile <- dist_meter/1609.344
full_info <- matrix(recent_places[,2], dist_mile[], first_place[,1:2], nrow = nrow(recent_places), ncol = 4)
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(Providence = nrow(confirmed), Country = ncol(confirmed), Lat = nrow(confirmed), Long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
recent_places[y,1:4] <- confirmed[x,1:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
y <- 1
first_place <- data.frame(Providence = 1, Country = 1, Lat = 1, Long = 1)
cases_number <- 0
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > cases_number)
{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo)
dist_mile <- dist_meter/1609.344
full_info <- data.frame(recent_places[,2], dist_mile[], first_place[,1:2], nrow = nrow(recent_places), ncol = 4)
cat(paste0(recent_places[,2], " is ", dist_mile[], " miles away from ", first_place[,1], " ", first_place[,2], sep="\n"))
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(Providence = nrow(confirmed), Country = ncol(confirmed), Lat = nrow(confirmed), Long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
recent_places[y,1:4] <- confirmed[x,1:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
y <- 1
first_place <- data.frame(Providence = 1, Country = 1, Lat = 1, Long = 1)
cases_number <- 0
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > cases_number)
{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo)
dist_mile <- dist_meter/1609.344
full_info <- data.frame(recent_places[,2], dist_mile[], first_place[,1:2], nrow = nrow(recent_places), ncol = 4)
print(full_info)
cat(paste0(recent_places[,2], " is ", dist_mile[], " miles away from ", first_place[,1], " ", first_place[,2], sep="\n"))
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(Providence = nrow(confirmed), Country = ncol(confirmed), Lat = nrow(confirmed), Long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
recent_places[y,1:4] <- confirmed[x,1:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
y <- 1
first_place <- data.frame(Providence = 1, Country = 1, Lat = 1, Long = 1)
cases_number <- 0
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > cases_number)
{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo)
dist_mile <- dist_meter/1609.344
full_info <- data.frame(recent_places[,2], dist_mile[], first_place[,1:2])
print(full_info)
cat(paste0(recent_places[,2], " is ", dist_mile[], " miles away from ", first_place[,1], " ", first_place[,2], sep="\n"))
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(Providence = nrow(confirmed), Country = ncol(confirmed), Lat = nrow(confirmed), Long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
recent_places[y,1:4] <- confirmed[x,1:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
y <- 1
first_place <- data.frame(Providence = 1, Country = 1, Lat = 1, Long = 1)
cases_number <- 0
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > cases_number)
{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo)
dist_mile <- dist_meter/1609.344
full_info <- data.frame(recent_places[,2], dist_mile[], first_place[,1:2])
print(full_info)
ordered_info <- full_info[order(dist_mile),]
cat(paste0(recent_places[,2], " is ", dist_mile[], " miles away from ", first_place[,1], " ", first_place[,2], sep="\n"))
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(Providence = nrow(confirmed), Country = ncol(confirmed), Lat = nrow(confirmed), Long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
recent_places[y,1:4] <- confirmed[x,1:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
y <- 1
first_place <- data.frame(Providence = 1, Country = 1, Lat = 1, Long = 1)
cases_number <- 0
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > cases_number)
{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo)
dist_mile <- dist_meter/1609.344
full_info <- data.frame(recent_places[,2], dist_mile[], first_place[,1:2])
print(full_info)
ordered_info <- full_info[order(dist_mile),]
print(ordered_info)
cat(paste0(recent_places[,2], " is ", dist_mile[], " miles away from ", first_place[,1], " ", first_place[,2], sep="\n"))
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(Providence = nrow(confirmed), Country = ncol(confirmed), Lat = nrow(confirmed), Long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
recent_places[y,1:4] <- confirmed[x,1:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
y <- 1
first_place <- data.frame(Providence = 1, Country = 1, Lat = 1, Long = 1)
cases_number <- 0
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > cases_number)
{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo)
dist_mile <- dist_meter/1609.344
full_info <- data.frame(recent_places[,2], dist_mile[], first_place[,1:2])
print(full_info)
ordered_info <- full_info[order(dist_mile),]
print(ordered_info)
cat(paste0(ordered_info[,1], " is ", ordered_info[,2], " miles away from ", ordered_info[,3], ", ", ordered_info[,4], sep="\n"))
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(Providence = nrow(confirmed), Country = ncol(confirmed), Lat = nrow(confirmed), Long = ncol(confirmed)) #create dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
recent_places[y,1:4] <- confirmed[x,1:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
y <- 1
first_place <- data.frame(Providence = 1, Country = 1, Lat = 1, Long = 1)
cases_number <- 0
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i]
if (cases > cases_number)
{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo)
dist_mile <- dist_meter/1609.344
full_info <- data.frame(recent_places[,2], dist_mile[], first_place[,1:2])
ordered_info <- full_info[order(dist_mile),]
cat(paste0(ordered_info[,1], " is ", ordered_info[,2], " miles away from ", ordered_info[,3], ", ", ordered_info[,4], sep="\n"))
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(Providence = nrow(confirmed), Country = ncol(confirmed), Lat = nrow(confirmed), Long = ncol(confirmed)) #dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Find values for the number of cases
cases_before <- confirmed[x,(i-1)] #Find values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
recent_places[y,1:4] <- confirmed[x,1:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day if no matches found
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
y <- 1
first_place <- data.frame(Providence = 1, Country = 1, Lat = 1, Long = 1)
cases_number <- 0
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i] #Values for the number of cases
if (cases > cases_number) #Largest number of cases on earliest day reported
{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1 #Move to next day if no cases found
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo) #Distance in meters from origin
dist_mile <- dist_meter/1609.344 #Distance in miles from origin
full_info <- data.frame(recent_places[,2], dist_mile[], first_place[,1:2]) #Dataframe with print information
ordered_info <- full_info[order(dist_mile),] #Order by distance from least to greatest
cat(paste0(ordered_info[,1], " is ", ordered_info[,2], " miles away from ", ordered_info[,3], ", ", ordered_info[,4], sep="\n"))
confirmed <- read.csv(file="../data/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)
recent_places <- data.frame(Providence = nrow(confirmed), Country = ncol(confirmed), Lat = nrow(confirmed), Long = ncol(confirmed)) #Dataframe to contain lat and long
y <- 1
for(x in 1:nrow(confirmed)){ #iterates through rows
i <- ncol(confirmed) #Start at the last column
new_cases <- confirmed[x,i] #Values for the number of cases
cases_before <- confirmed[x,(i-1)] #Values for the number of cases the day before
if (new_cases > 0 && cases_before == 0){ #The first date of instance
recent_places[y,1:4] <- confirmed[x,1:4]
y <- y + 1
} else {
i <- i - 1 #Move back one column to find previous day if no matches found
}
}
recent_places <- recent_places[1:(y-1),] #Truncate dataframe to correct size
y <- 1
first_place <- data.frame(Providence = 1, Country = 1, Lat = 1, Long = 1)
cases_number <- 0
for (x in 1:nrow(confirmed)) {
i <- 5 #Start at first column of case number data
cases <- confirmed[x,i] #Values for the number of cases
if (cases > cases_number) #Largest number of cases on earliest day reported
{
first_place[1,1:4] <- confirmed[x,1:4]
cases_number <- confirmed[x,i]
}
else
{
i <- i + 1 #Move to next day if no cases found
}
}
dist_meter <- geosphere::distm(recent_places[,4:3], first_place[1,4:3], fun = distGeo) #Distance in meters from origin
dist_mile <- dist_meter/1609.344 #Distance in miles from origin
full_info <- data.frame(recent_places[,2], dist_mile[], first_place[,1:2]) #Dataframe with print information
ordered_info <- full_info[order(dist_mile),] #Order by distance from least to greatest
cat(paste0(ordered_info[,1], " is ", ordered_info[,2], " miles away from ", ordered_info[,3], ", ", ordered_info[,4], sep="\n"))
